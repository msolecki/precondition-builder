{"version":3,"sources":["components/Tabs/AdvancedTab/index.tsx","components/Title/index.tsx","components/Conditions/Activated/index.tsx","components/Conditions/Logged/index.tsx","components/Conditions/Location/index.tsx","components/Conditions/OperatingSystem/index.tsx","components/Autocomplete/index.tsx","components/Conditions/HtmlNugget/index.tsx","components/Tabs/BasicTab/index.tsx","dataTransformer.ts","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","_ref","root","padding","spacing","AdvancedTab","props","classes","react_default","a","createElement","Paper","className","JSONPretty_default","id","json","data","defaultProps","Title","Typography","variant","component","text","display","flexWrap","formControl","marginTop","marginBottom","minWidth","Activated","Fragment","components_Title","FormControl","fullWidth","required","Select","value","activated","Number","displayEmpty","onChange","event","target","onDataChange","inputProps","name","MenuItem","button","Logged","logged","formControlWithoutMargin","Location","_React$useState","React","useState","_React$useState2","Object","slicedToArray","latLngError","setLatLngError","Grid","container","item","xs","InputLabel","htmlFor","Input","placeholder","type","radius","setRadius","endAdornment","InputAdornment","position","min","max","step","error","latLng","validated","test","isValidatedLatLangFormat","setLatLng","OperatingSystem","system","flexGrow","height","paper","zIndex","left","right","chip","margin","inputRoot","inputInput","width","Autocomplete","downshift_esm","initialSelectedItem","selectedData","onStateChange","changes","hasOwnProperty","handleChange","inputValue","toString","_ref2","clearSelection","getInputProps","getItemProps","getLabelProps","getMenuProps","highlightedIndex","isOpen","openMenu","selectedItem","_getInputProps","onFocus","onBlur","objectWithoutProperties","suggestions","deburr","toLowerCase","inputLength","length","filter","slice","getSuggestions","InputProps","ref","other","TextField","assign","objectSpread","inputRef","input","renderInput","label","InputLabelProps","square","map","nuggetId","index","suggestionProps","itemProps","isHighlighted","isSelected","indexOf","key","selected","style","fontWeight","renderSuggestion","HtmlNugget","setId","_React$useState3","_React$useState4","conditionValue","setConditionValue","addNuggetHandle","condition","addNugget","Boolean","components_Autocomplete","ids","BasicTab","setLogged","setSystem","_React$useState5","_React$useState6","_React$useState7","_React$useState8","_React$useState9","_React$useState10","nuggets","setNuggets","clearState","handleActivated","autoComplete","Conditions_Activated","Conditions_OperatingSystem","Conditions_Logged","Conditions_Location","Conditions_HtmlNugget","htmlNuggetIds","nugget","newNuggets","push","Button","color","onClick","handleAddCondition","location","conditions","transform","active","result","concat","forEach","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeTab","newNumber","setState","tabNumber","setActivated","newCondition","state","_this$state","Container","AppBar","Tabs","Tab","paddingTop","Tabs_BasicTab","Tabs_AdvancedTab","Component","window","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8356bfe.chunk.js","sourcesContent":["import React from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport {makeStyles} from '@material-ui/core/styles'\nimport JSONPretty from 'react-json-pretty'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(({spacing}) => ({\n    root: {\n        padding: spacing(3, 2),\n    },\n}))\n\nexport interface AdvancedTabProps {\n    data: object;\n}\n\nconst AdvancedTab: React.FC<AdvancedTabProps> = (props: AdvancedTabProps): React.ReactElement => {\n    const classes = useStyles()\n\n    return (\n        <Paper className={classes.root}>\n            <JSONPretty id=\"json-pretty\" json={props.data}/>\n        </Paper>\n    )\n}\n\nAdvancedTab.propTypes = {\n    data: PropTypes.any, // TODO fix it\n}\n\nAdvancedTab.defaultProps = {\n    data: {},\n}\n\n\nexport default AdvancedTab\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Typography} from '@material-ui/core'\n\nexport interface TitleProps {\n    text: string;\n}\n\nconst Title: React.FC<TitleProps> = (props: TitleProps): React.ReactElement => {\n    return (\n        <Typography variant=\"h5\" component=\"h5\">\n            {props.text}\n        </Typography>\n    )\n}\n\nTitle.propTypes = {\n    text: PropTypes.string.isRequired,\n}\n\nTitle.defaultProps = {\n    text: '',\n}\n\nexport default Title\n","import React, {ChangeEvent} from 'react'\nimport {makeStyles} from '@material-ui/core/styles'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport PropTypes from 'prop-types'\nimport Title from '../../Title'\n\nconst useStyles = makeStyles(({spacing}) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    formControl: {\n        marginTop: spacing(1),\n        marginBottom: spacing(3),\n        minWidth: 120,\n    },\n}))\n\nexport interface ActivatedProps {\n    onDataChange(value: boolean): void;\n\n    activated: boolean | null;\n}\n\nconst Activated: React.FC<ActivatedProps> = (props: ActivatedProps): React.ReactElement => {\n    const classes = useStyles()\n\n    function handleChange(event: ChangeEvent<{}>): void {\n        const {value} = event.target as HTMLSelectElement\n\n        props.onDataChange(Number(value) === 1)\n    }\n\n    return (\n        <>\n            <Title text=\"Activated\"/>\n            <FormControl className={classes.formControl} fullWidth required component='div'>\n                <Select\n                    value={props.activated === null ? '' : Number(props.activated)}\n                    displayEmpty\n                    onChange={handleChange}\n                    inputProps={{\n                        name: 'activated',\n                        id: 'activated',\n                    }}\n                >\n                    <MenuItem component='li' button={true} value={1}>True</MenuItem>\n                    <MenuItem component='li' button={true} value={0}>False</MenuItem>\n                </Select>\n            </FormControl>\n        </>\n    )\n}\n\nActivated.propTypes = {\n    onDataChange: PropTypes.func.isRequired,\n    activated: PropTypes.bool,\n}\n\nActivated.defaultProps = {\n    activated: null,\n}\n\nexport default Activated\n","import React, {ChangeEvent} from 'react'\nimport {makeStyles} from '@material-ui/core/styles'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport PropTypes from 'prop-types'\nimport Title from '../../Title'\n\nconst useStyles = makeStyles(({spacing}) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    formControl: {\n        marginTop: spacing(1),\n        marginBottom: spacing(3),\n        minWidth: 120,\n    },\n}))\n\nexport interface LoggedProps {\n    onDataChange(value: boolean): void;\n\n    logged: boolean | null;\n}\n\nconst Logged: React.FC<LoggedProps> = (props: LoggedProps): React.ReactElement => {\n    const classes = useStyles()\n\n    function handleChange(event: ChangeEvent<{}>): void {\n        const {value} = event.target as HTMLSelectElement\n\n        props.onDataChange(Number(value) === 1)\n    }\n\n    return (\n        <>\n            <Title text=\"Logged in\"/>\n            <FormControl className={classes.formControl} fullWidth required component='div'>\n                <Select\n                    value={props.logged === null ? '' : Number(props.logged)}\n                    displayEmpty\n                    onChange={handleChange}\n                    inputProps={{\n                        name: 'activated',\n                        id: 'activated',\n                    }}\n                >\n                    <MenuItem component='li' button={true} value={1}>True</MenuItem>\n                    <MenuItem component='li' button={true} value={0}>False</MenuItem>\n                </Select>\n            </FormControl>\n        </>\n    )\n}\n\nLogged.propTypes = {\n    onDataChange: PropTypes.func.isRequired,\n    logged: PropTypes.bool,\n}\n\nLogged.defaultProps = {\n    logged: null,\n}\n\nexport default Logged\n","import React, {ChangeEvent} from 'react'\nimport {makeStyles} from '@material-ui/core/styles'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport {Input} from '@material-ui/core'\nimport PropTypes from 'prop-types'\nimport Grid from '@material-ui/core/Grid'\nimport Title from '../../Title'\n\nconst useStyles = makeStyles(({spacing}) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    formControl: {\n        marginTop: spacing(1),\n        marginBottom: spacing(3),\n        minWidth: 120,\n    },\n    formControlWithoutMargin: {\n        marginTop: spacing(1),\n        minWidth: 120,\n    },\n}))\n\nexport interface LocationProps {\n    setRadius(value: number): void;\n\n    setLatLng(value: string): void;\n\n    radius: number | null;\n    latLng: string | null;\n}\n\nconst Location: React.FC<LocationProps> = (props: LocationProps): React.ReactElement => {\n    const classes = useStyles()\n    const [latLngError, setLatLngError] = React.useState<boolean>(false)\n\n    function handleRadiusChange(event: ChangeEvent<{}>): void {\n        const {value} = event.target as HTMLInputElement\n\n        props.setRadius(Number(value))\n    }\n\n    function isValidatedLatLangFormat(value: string): boolean {\n        return /^@([-+]?\\d{1,2}[.]\\d+),([-+]?\\d{1,2}[.]\\d+)$/.test(value)\n    }\n\n    function handleLatLangChange(event: ChangeEvent<{}>): void {\n        const {value} = event.target as HTMLInputElement\n        const validated = isValidatedLatLangFormat(value)\n\n        setLatLngError(!validated)\n\n        props.setLatLng(value)\n    }\n\n    return (\n        <>\n            <Title text=\"Location\"/>\n            <Grid container spacing={3}>\n                <Grid item xs={6}>\n                    <FormControl fullWidth required className={classes.formControlWithoutMargin} component='div'>\n                        <InputLabel htmlFor=\"location-radius\">Radius</InputLabel>\n                        <Input\n                            id=\"location-radius\"\n                            placeholder={'0'}\n                            type='number'\n                            value={Number(props.radius) || ''}\n                            onChange={handleRadiusChange}\n                            endAdornment={<InputAdornment position=\"end\">m</InputAdornment>}\n                            inputProps={{min: 5, max: 10000, step: 1}}\n                        />\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <FormControl fullWidth required className={classes.formControl} component='div'>\n                        <InputLabel htmlFor=\"location-latlng\" error={latLngError}>GPS</InputLabel>\n                        <Input\n                            id=\"location-gps\"\n                            value={props.latLng || ''}\n                            placeholder={'@52.13,13.45'}\n                            onChange={handleLatLangChange}\n                            error={latLngError}\n                        />\n                    </FormControl>\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n\nLocation.propTypes = {\n    setRadius: PropTypes.func.isRequired,\n    setLatLng: PropTypes.func.isRequired,\n\n    radius: PropTypes.number,\n    latLng: PropTypes.string,\n}\n\nLocation.defaultProps = {\n    radius: null,\n    latLng: null,\n}\n\nexport default Location\n","import React, {ChangeEvent} from 'react'\nimport {makeStyles} from '@material-ui/core/styles'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport PropTypes from 'prop-types'\nimport Title from '../../Title'\n\nconst useStyles = makeStyles(({spacing}) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    formControl: {\n        marginTop: spacing(1),\n        marginBottom: spacing(3),\n        minWidth: 120,\n    },\n}))\n\nexport interface OperatingSystemProps {\n    onDataChange(value: string | null): void;\n\n    system: string | null;\n}\n\nconst OperatingSystem: React.FC<OperatingSystemProps> = (props: OperatingSystemProps): React.ReactElement => {\n    const classes = useStyles()\n\n    function handleChange(event: ChangeEvent<{}>): void {\n        const {value} = event.target as HTMLSelectElement\n\n        props.onDataChange(value)\n    }\n\n    return (\n        <>\n            <Title text=\"Operating system\"/>\n            <FormControl className={classes.formControl} fullWidth required component='div'>\n                <Select\n                    value={props.system === null ? '' : props.system}\n                    displayEmpty\n                    onChange={handleChange}\n                    inputProps={{\n                        name: 'system',\n                        id: 'system',\n                    }}\n                >\n                    <MenuItem component='li' button={true} value={'iOS'}>iOS</MenuItem>\n                    <MenuItem component='li' button={true} value={'Android'}>Android</MenuItem>\n                </Select>\n            </FormControl>\n        </>\n    )\n}\n\nOperatingSystem.propTypes = {\n    onDataChange: PropTypes.func.isRequired,\n    system: PropTypes.string,\n}\n\nOperatingSystem.defaultProps = {\n    system: null,\n}\n\nexport default OperatingSystem\n","import React, {ChangeEvent} from 'react'\nimport PropTypes from 'prop-types'\nimport TextField from '@material-ui/core/TextField'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Paper from '@material-ui/core/Paper'\nimport Downshift from 'downshift'\nimport deburr from 'lodash.deburr'\nimport {makeStyles} from '@material-ui/core'\n\nexport interface AutocompleteProps {\n    handleChange(value: string): void;\n\n    data: string[];\n    selectedData: string | null;\n}\n\nconst useStyles = makeStyles(({spacing}) => ({\n    root: {\n        flexGrow: 1,\n        height: 250,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: 1,\n        marginTop: spacing(1),\n        left: 0,\n        right: 0,\n    },\n    chip: {\n        margin: spacing(0.5, 0.25),\n    },\n    inputRoot: {\n        flexWrap: 'wrap',\n    },\n    inputInput: {\n        width: 'auto',\n        flexGrow: 1,\n    },\n    formControlWithoutMargin: {\n        marginTop: spacing(1),\n        marginBottom: spacing(3),\n        minWidth: 120,\n    },\n}))\n\nconst Autocomplete: React.FC<AutocompleteProps> = (props: AutocompleteProps): React.ReactElement => {\n    const classes = useStyles()\n\n    function renderInput(inputProps): React.ReactElement {\n        const {InputProps, classes, ref, ...other} = inputProps\n\n        return (\n            <TextField\n                InputProps={{\n                    inputRef: ref,\n                    classes: {\n                        root: classes.inputRoot,\n                        input: classes.inputInput,\n                    },\n                    ...InputProps,\n                }}\n                {...other}\n            />\n        )\n    }\n\n    function getSuggestions(value): string[] {\n        const inputValue = deburr(value).toLowerCase()\n        const inputLength = inputValue.length\n\n        return props.data.filter((id): boolean => id.slice(0, inputLength).toLowerCase() === inputValue).slice(0, 5)\n    }\n\n    function renderSuggestion(suggestionProps): React.ReactElement {\n        const {nuggetId, index, itemProps, highlightedIndex, selectedItem} = suggestionProps\n        const isHighlighted = highlightedIndex === index\n        const isSelected = (selectedItem || '').indexOf(nuggetId) > -1\n\n        return (\n            <MenuItem\n                {...itemProps}\n                key={nuggetId}\n                selected={isHighlighted}\n                component=\"div\"\n                style={{\n                    fontWeight: isSelected ? 500 : 400,\n                }}\n            >\n                {nuggetId}\n            </MenuItem>\n        )\n    }\n\n    function handleChange(changes): void {\n        if (changes.hasOwnProperty('inputValue')) {\n            props.handleChange(changes.inputValue.toString())\n        }\n    }\n\n    return (\n        <Downshift initialSelectedItem={props.selectedData} onStateChange={handleChange}>\n            {({clearSelection, getInputProps, getItemProps, getLabelProps, getMenuProps, highlightedIndex, inputValue, isOpen, openMenu, selectedItem}): React.ReactElement => {\n                const onChangeData = (event: ChangeEvent<HTMLInputElement>): void => {\n                    if (event.target.value === '') {\n                        clearSelection()\n                    }\n                }\n\n                const {onBlur, onChange, onFocus, ...inputProps} = getInputProps({\n                    onChange: onChangeData,\n                    onFocus: openMenu,\n                    placeholder: 'Start typing',\n                })\n\n\n                const suggestions = getSuggestions(inputValue)\n\n                return (\n                    <div className={classes.container}>\n                        {renderInput({\n                            fullWidth: true,\n                            classes,\n                            label: 'HTML Nugget ID',\n                            InputLabelProps: getLabelProps(),\n                            InputProps: {onBlur, onChange, onFocus},\n                            inputProps,\n                        })}\n\n                        <div {...getMenuProps()}>\n                            {isOpen &&\n                            <Paper className={classes.paper} square>\n                                {suggestions.map((nuggetId, index): React.ReactElement =>\n                                    renderSuggestion({\n                                        nuggetId,\n                                        index,\n                                        itemProps: getItemProps({item: nuggetId}),\n                                        highlightedIndex,\n                                        selectedItem,\n                                    }),\n                                )}\n                            </Paper>\n                            }\n                        </div>\n                    </div>\n                )\n            }}\n        </Downshift>\n    )\n}\n\nAutocomplete.propTypes = {\n    handleChange: PropTypes.func.isRequired,\n    data: PropTypes.array.isRequired,\n    selectedData: PropTypes.string,\n}\n\nAutocomplete.defaultProps = {\n    data: [],\n    selectedData: null\n}\n\nexport default Autocomplete\n","import React, {ChangeEvent} from 'react'\nimport PropTypes from 'prop-types'\nimport Title from '../../Title'\nimport FormControl from '@material-ui/core/FormControl'\nimport {makeStyles} from '@material-ui/core'\n\nimport Grid from '@material-ui/core/Grid'\nimport Autocomplete from '../../Autocomplete'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport {NuggetConditionInterface} from '../../App/interfaces'\nimport InputLabel from '@material-ui/core/InputLabel'\n\nconst useStyles = makeStyles(({spacing}) => ({\n    root: {\n        flexGrow: 1,\n        height: 250,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    formControl: {\n        marginTop: spacing(1),\n        marginBottom: spacing(3),\n        minWidth: 120,\n    },\n    formControlWithoutMargin: {\n        minWidth: 120,\n    },\n}))\n\nexport interface HtmlNuggetProps {\n    addNugget(value: NuggetConditionInterface): void;\n\n    ids: string[];\n}\n\nconst HtmlNugget: React.FC<HtmlNuggetProps> = (props: HtmlNuggetProps): React.ReactElement => {\n    const classes = useStyles()\n\n    const [id, setId] = React.useState<string | null>(null)\n    const [conditionValue, setConditionValue] = React.useState<number | null>(null)\n\n    function addNuggetHandle(id, condition, value): void {\n        if (id && value !== null) {\n            props.addNugget({\n                id: id.toString(),\n                condition: condition,\n                value: Boolean(value)\n            })\n        }\n    }\n\n    function handleValueChange(event: ChangeEvent<{}>): void {\n        const {value} = event.target as HTMLInputElement\n\n        setConditionValue(Number(value))\n\n        addNuggetHandle(id, 'read', value)\n    }\n\n    function handleIdChange(id: string): void {\n        setId(id)\n\n        addNuggetHandle(id, 'read', conditionValue)\n    }\n\n    return (\n        <>\n            <Title text=\"HTMLNugget\"/>\n            <FormControl fullWidth required className={classes.formControl} component='div'>\n                <Grid container spacing={3}>\n                    <Grid item xs={4}>\n                        <Autocomplete data={props.ids} selectedData={id} handleChange={handleIdChange}/>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <FormControl fullWidth required className={classes.formControlWithoutMargin} component='div'>\n                            <InputLabel htmlFor=\"nuggetCondition\">Condition</InputLabel>\n                            <Select\n                                value={'read'}\n                                displayEmpty\n                                fullWidth\n                                inputProps={{\n                                    name: 'nuggetCondition',\n                                    id: 'nuggetCondition',\n                                }}\n                            >\n                                <MenuItem component='li' button={true} value={'read'}>Read</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <FormControl fullWidth required className={classes.formControlWithoutMargin} component='div'>\n                            <InputLabel htmlFor=\"nuggetAccessValue\">Value</InputLabel>\n                            <Select\n                                value={conditionValue === null ? '' : Number(conditionValue)}\n                                displayEmpty\n                                fullWidth\n                                onChange={handleValueChange}\n                                inputProps={{\n                                    name: 'nuggetAccessValue',\n                                    id: 'nuggetAccessValue',\n                                }}\n                            >\n                                <MenuItem component='li' button={true} value={1}>True</MenuItem>\n                                <MenuItem component='li' button={true} value={0}>False</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n            </FormControl>\n        </>\n    )\n}\n\nHtmlNugget.propTypes = {\n    addNugget: PropTypes.func.isRequired,\n    ids: PropTypes.array.isRequired,\n}\n\nHtmlNugget.defaultProps = {\n    ids: []\n}\n\nexport default HtmlNugget\n","import React from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport {makeStyles} from '@material-ui/core/styles'\nimport Activated from '../../Conditions/Activated'\nimport Logged from '../../Conditions/Logged'\nimport Location from '../../Conditions/Location'\nimport {ConditionInterface, NuggetConditionInterface} from '../../App/interfaces'\nimport PropTypes from 'prop-types'\nimport OperatingSystem from '../../Conditions/OperatingSystem'\nimport HtmlNugget from '../../Conditions/HtmlNugget'\n\nconst useStyles = makeStyles(({spacing}) => ({\n    root: {\n        padding: spacing(3, 2),\n    },\n}))\n\nexport interface BasicTabProps {\n    handleAddCondition(value: ConditionInterface): void;\n\n    handleActivated(value: boolean): void;\n\n    htmlNuggetIds: string[];\n    activated: boolean;\n    conditions: ConditionInterface[];\n}\n\nconst BasicTab: React.FC<BasicTabProps> = (props: BasicTabProps): React.ReactElement => {\n    const classes = useStyles()\n\n    const [logged, setLogged] = React.useState<boolean | null>(null)\n    const [system, setSystem] = React.useState<string | null>(null)\n    const [radius, setRadius] = React.useState<number | null>(null)\n    const [latLng, setLatLng] = React.useState<string | null>(null)\n    const [nuggets, setNuggets] = React.useState<NuggetConditionInterface[]>([])\n\n    const clearState = (): void => {\n        props.handleActivated(false)\n        setLogged(null)\n        setRadius(null)\n        setLatLng(null)\n        setNuggets([])\n    }\n\n    const addCondition = (): void => {\n        props.handleAddCondition({\n            logged,\n            system,\n            location: {\n                radius, latLng\n            },\n            nuggets,\n        })\n    }\n\n    const onSave = (): void => {\n        addCondition()\n        clearState()\n    }\n\n    const addNugget = (nugget: NuggetConditionInterface): void => {\n        const newNuggets = nuggets || []\n        newNuggets.push(nugget)\n\n        setNuggets(newNuggets)\n    }\n\n    return (\n        <Paper className={classes.root}>\n            <form autoComplete=\"off\">\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <Activated onDataChange={props.handleActivated} activated={props.activated}/>\n                    </Grid>\n                </Grid>\n                <Grid container spacing={3}>\n                    <Grid item xs={6}>\n                        <OperatingSystem onDataChange={setSystem} system={system}/>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Logged onDataChange={setLogged} logged={logged}/>\n                    </Grid>\n                </Grid>\n                <Location setRadius={setRadius} setLatLng={setLatLng} radius={radius} latLng={latLng}/>\n                <HtmlNugget ids={props.htmlNuggetIds} addNugget={addNugget}/>\n                <Grid container spacing={3}>\n                    <Grid item xs={6}>\n                        <Button variant=\"contained\" color=\"secondary\" onClick={onSave} fullWidth>\n                            Add condition\n                        </Button>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Button variant=\"contained\" color=\"default\" onClick={clearState} fullWidth>\n                            Clear\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </Paper>\n    )\n}\n\nBasicTab.propTypes = {\n    handleAddCondition: PropTypes.func.isRequired,\n    htmlNuggetIds: PropTypes.array.isRequired,\n    handleActivated: PropTypes.func.isRequired,\n    conditions: PropTypes.any, // TODO it should be fixed\n    activated: PropTypes.bool.isRequired,\n}\n\nBasicTab.defaultProps = {\n    activated: false,\n    conditions: [],\n    htmlNuggetIds: [],\n}\n\nexport default BasicTab\n","import {ConditionInterface, NuggetConditionInterface} from './components/App/interfaces'\n\nexport const transform = (conditions: ConditionInterface[], activated: boolean): object => {\n    return {\n        active: activated,\n        conditions: conditions.map((condition: ConditionInterface): string[] => {\n            const result: string[] = []\n\n            if (condition.system) {\n                result.push(`client.tracking.system.os == '${condition.system}'`)\n            }\n\n            if (condition.logged !== null) {\n                result.push(`logged == '${condition.logged}'`)\n            }\n\n            if (condition.location && condition.location.radius) {\n                result.push(`location_radius == '${condition.location.radius}'`)\n            }\n\n            if (condition.nuggets) {\n                condition.nuggets.forEach((nugget: NuggetConditionInterface): void => {\n                    result.push(`public.kesi.additionalData.${nugget.id}.${nugget.condition} == ${nugget.value}`)\n                })\n            }\n\n            return result\n        }).filter((item): boolean => item.length > 0)\n    }\n}\n","import React, {ChangeEvent, ReactElement} from 'react'\nimport {Container} from '@material-ui/core'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Typography from '@material-ui/core/Typography'\nimport AdvancedTab from '../Tabs/AdvancedTab'\nimport BasicTab from '../Tabs/BasicTab'\nimport {ConditionInterface} from './interfaces'\nimport {transform} from '../../dataTransformer'\n\nexport interface StateInterface {\n    conditions: ConditionInterface[];\n    tabNumber: number;\n    activated: boolean;\n}\n\nexport interface AppProps {\n    htmlNuggetIds: string[];\n}\n\nclass App extends React.Component<AppProps, StateInterface> {\n    public constructor(props: AppProps) {\n        super(props)\n\n        this.state = {\n            conditions: [],\n            activated: false,\n            tabNumber: 0\n        }\n    }\n\n    private changeTab = (event: ChangeEvent<{}>, newNumber: number): void => {\n        this.setState({tabNumber: newNumber})\n    }\n\n    private setActivated = (activated: boolean): void => {\n        this.setState({activated})\n    }\n\n    public handleAddCondition = (newCondition: ConditionInterface): void => {\n        const conditions = this.state.conditions\n\n        conditions.push(newCondition)\n\n        this.setState({conditions})\n    }\n\n    public render(): ReactElement {\n        const {tabNumber, conditions, activated} = this.state\n        const {htmlNuggetIds} = this.props\n\n        return (\n            <Container style={{width: '50%'}}>\n                <AppBar position=\"static\">\n                    <Tabs value={tabNumber} onChange={this.changeTab} variant=\"fullWidth\">\n                        <Tab label=\"Basic\"/>\n                        <Tab label=\"Advanced\"/>\n                    </Tabs>\n                </AppBar>\n                <Typography component=\"div\" style={{paddingTop: 25}}>\n                    {tabNumber === 0 && <BasicTab\n                        handleAddCondition={this.handleAddCondition}\n                        conditions={conditions}\n                        activated={activated}\n                        htmlNuggetIds={htmlNuggetIds}\n                        handleActivated={this.setActivated}\n                    />}\n                    {tabNumber === 1 && <AdvancedTab data={transform(conditions, activated)}/>}\n                </Typography>\n            </Container>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        )\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App htmlNuggetIds={['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']}/>, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}